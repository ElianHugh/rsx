% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/component-template.R
\name{component-template}
\alias{component-template}
\title{Component Template}
\description{
The template refers to the UI-generator of a given component.
This is analagous to the UI function of a given {shiny} module.
}
\details{
The component template function must be of the following structure (note
the ns argument):

\if{html}{\out{<div class="sourceCode r">}}\preformatted{function(ns) \{
 # must either return an object that can
 # be coerced to a `shiny::tags` object or a `shiny::tagList`
\}
}\if{html}{\out{</div>}}

The following is an example of a valid template:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{function(ns) \{
 shiny::div("Hello world!")
\}
}\if{html}{\out{</div>}}
}
\section{Namespacing}{
The template function requires one argument: \code{ns}.
\code{ns} is used identically to shiny modules, and
helps distinguish between component instances.
}

\section{Slots}{
Component templates can be nested through the use of slots.
Slots are placeholder elements that tell {rsx} where tags should be placed.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- component(
    name = "slots",
    template = function(ns) \{
        shiny::tagList(
            shiny::tags$slot(),
            shiny::p("bar")
        )
    \}
)

print(x(shiny::p("foo")))
#> <rsx::instance> `slots`
#>   <p>foo</p>
#>   <p>bar</p>
}\if{html}{\out{</div>}}

You can also specify if you'd like content to be used in the case that a
slot isn't filled -- this is typically called "fallback" content.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- component(
    name = "fallback",
    template = function(ns) \{
        shiny::tags$slot(
            shiny::p("Hello!")
        )
    \}
)

print(x())
#> <rsx::instance> `fallback`
#>   <p>Hello!</p>
}\if{html}{\out{</div>}}
\subsection{Named Slots}{

Slots can be further distinguished by name attributes, which
can be used to target specific areas of the template.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- component(
    name = "named_slots",
    template = function(ns) \{
        shiny::tagList(
            shiny::tags$slot(name = "a"),
            shiny::tags$slot(name = "b")
        )
    \}
)
print(x(shiny::p("bar", slot = "b"), shiny::p("foo", slot = "a")))
#> <rsx::instance> `named_slots`
#>   <p>foo</p>
#>   <p>bar</p>
}\if{html}{\out{</div>}}
}
}

\seealso{
Other components: 
\code{\link{component-data}},
\code{\link{component-methods}},
\code{\link{component-styles}},
\code{\link{component}()}
}
\concept{components}
